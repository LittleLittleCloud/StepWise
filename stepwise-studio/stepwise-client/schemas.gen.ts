// This file is auto-generated by @hey-api/openapi-ts

export const AssemblySchema = {
    type: 'object',
    properties: {
        definedTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TypeInfo'
            },
            nullable: true,
            readOnly: true
        },
        exportedTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        },
        codeBase: {
            type: 'string',
            nullable: true,
            readOnly: true,
            deprecated: true
        },
        entryPoint: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        fullName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        imageRuntimeVersion: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        isDynamic: {
            type: 'boolean',
            readOnly: true
        },
        location: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        reflectionOnly: {
            type: 'boolean',
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        isFullyTrusted: {
            type: 'boolean',
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        escapedCodeBase: {
            type: 'string',
            nullable: true,
            readOnly: true,
            deprecated: true
        },
        manifestModule: {
            '$ref': '#/components/schemas/Module'
        },
        modules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Module'
            },
            nullable: true,
            readOnly: true
        },
        globalAssemblyCache: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        hostContext: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        securityRuleSet: {
            '$ref': '#/components/schemas/SecurityRuleSet'
        }
    },
    additionalProperties: false
} as const;

export const CallingConventionsSchema = {
    enum: [1, 2, 3, 32, 64],
    type: 'integer',
    format: 'int32'
} as const;

export const ConstructorInfoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        declaringType: {
            '$ref': '#/components/schemas/Type'
        },
        reflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        module: {
            '$ref': '#/components/schemas/Module'
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        attributes: {
            '$ref': '#/components/schemas/MethodAttributes'
        },
        methodImplementationFlags: {
            '$ref': '#/components/schemas/MethodImplAttributes'
        },
        callingConvention: {
            '$ref': '#/components/schemas/CallingConventions'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isConstructor: {
            type: 'boolean',
            readOnly: true
        },
        isFinal: {
            type: 'boolean',
            readOnly: true
        },
        isHideBySig: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isStatic: {
            type: 'boolean',
            readOnly: true
        },
        isVirtual: {
            type: 'boolean',
            readOnly: true
        },
        isAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamily: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodDefinition: {
            type: 'boolean',
            readOnly: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        methodHandle: {
            '$ref': '#/components/schemas/RuntimeMethodHandle'
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        }
    },
    additionalProperties: false
} as const;

export const CustomAttributeDataSchema = {
    type: 'object',
    properties: {
        attributeType: {
            '$ref': '#/components/schemas/Type'
        },
        constructor: {
            '$ref': '#/components/schemas/ConstructorInfo'
        },
        constructorArguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeTypedArgument'
            },
            nullable: true,
            readOnly: true
        },
        namedArguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeNamedArgument'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const CustomAttributeNamedArgumentSchema = {
    type: 'object',
    properties: {
        memberInfo: {
            '$ref': '#/components/schemas/MemberInfo'
        },
        typedValue: {
            '$ref': '#/components/schemas/CustomAttributeTypedArgument'
        },
        memberName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        isField: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const CustomAttributeTypedArgumentSchema = {
    type: 'object',
    properties: {
        argumentType: {
            '$ref': '#/components/schemas/Type'
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const EventAttributesSchema = {
    enum: [0, 512, 1024],
    type: 'integer',
    format: 'int32'
} as const;

export const EventInfoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        declaringType: {
            '$ref': '#/components/schemas/Type'
        },
        reflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        module: {
            '$ref': '#/components/schemas/Module'
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        attributes: {
            '$ref': '#/components/schemas/EventAttributes'
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        addMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        removeMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        raiseMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        isMulticast: {
            type: 'boolean',
            readOnly: true
        },
        eventHandlerType: {
            '$ref': '#/components/schemas/Type'
        }
    },
    additionalProperties: false
} as const;

export const ExceptionSchema = {
    type: 'object',
    properties: {
        targetSite: {
            '$ref': '#/components/schemas/MethodBase'
        },
        message: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        data: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        innerException: {
            '$ref': '#/components/schemas/Exception'
        },
        helpLink: {
            type: 'string',
            nullable: true
        },
        source: {
            type: 'string',
            nullable: true
        },
        hResult: {
            type: 'integer',
            format: 'int32'
        },
        stackTrace: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const FieldAttributesSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6, 7, 16, 32, 64, 128, 256, 512, 1024, 4096, 8192, 32768, 38144],
    type: 'integer',
    format: 'int32'
} as const;

export const FieldInfoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        declaringType: {
            '$ref': '#/components/schemas/Type'
        },
        reflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        module: {
            '$ref': '#/components/schemas/Module'
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        attributes: {
            '$ref': '#/components/schemas/FieldAttributes'
        },
        fieldType: {
            '$ref': '#/components/schemas/Type'
        },
        isInitOnly: {
            type: 'boolean',
            readOnly: true
        },
        isLiteral: {
            type: 'boolean',
            readOnly: true
        },
        isNotSerialized: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        isPinvokeImpl: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isStatic: {
            type: 'boolean',
            readOnly: true
        },
        isAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamily: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        fieldHandle: {
            '$ref': '#/components/schemas/RuntimeFieldHandle'
        }
    },
    additionalProperties: false
} as const;

export const GenericParameterAttributesSchema = {
    enum: [0, 1, 2, 3, 4, 8, 16, 28],
    type: 'integer',
    format: 'int32'
} as const;

export const ICustomAttributeProviderSchema = {
    type: 'object',
    additionalProperties: false
} as const;

export const IntPtrSchema = {
    type: 'object',
    additionalProperties: false
} as const;

export const LayoutKindSchema = {
    enum: [0, 2, 3],
    type: 'integer',
    format: 'int32'
} as const;

export const MemberInfoSchema = {
    type: 'object',
    properties: {
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        declaringType: {
            '$ref': '#/components/schemas/Type'
        },
        reflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        module: {
            '$ref': '#/components/schemas/Module'
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const MemberTypesSchema = {
    enum: [1, 2, 4, 8, 16, 32, 64, 128, 191],
    type: 'integer',
    format: 'int32'
} as const;

export const MethodAttributesSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 53248],
    type: 'integer',
    format: 'int32'
} as const;

export const MethodBaseSchema = {
    type: 'object',
    properties: {
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        declaringType: {
            '$ref': '#/components/schemas/Type'
        },
        reflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        module: {
            '$ref': '#/components/schemas/Module'
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        attributes: {
            '$ref': '#/components/schemas/MethodAttributes'
        },
        methodImplementationFlags: {
            '$ref': '#/components/schemas/MethodImplAttributes'
        },
        callingConvention: {
            '$ref': '#/components/schemas/CallingConventions'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isConstructor: {
            type: 'boolean',
            readOnly: true
        },
        isFinal: {
            type: 'boolean',
            readOnly: true
        },
        isHideBySig: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isStatic: {
            type: 'boolean',
            readOnly: true
        },
        isVirtual: {
            type: 'boolean',
            readOnly: true
        },
        isAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamily: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodDefinition: {
            type: 'boolean',
            readOnly: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        methodHandle: {
            '$ref': '#/components/schemas/RuntimeMethodHandle'
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const MethodImplAttributesSchema = {
    enum: [0, 1, 2, 3, 4, 8, 16, 32, 64, 128, 256, 512, 4096, 65535],
    type: 'integer',
    format: 'int32'
} as const;

export const MethodInfoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        declaringType: {
            '$ref': '#/components/schemas/Type'
        },
        reflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        module: {
            '$ref': '#/components/schemas/Module'
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        attributes: {
            '$ref': '#/components/schemas/MethodAttributes'
        },
        methodImplementationFlags: {
            '$ref': '#/components/schemas/MethodImplAttributes'
        },
        callingConvention: {
            '$ref': '#/components/schemas/CallingConventions'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isConstructor: {
            type: 'boolean',
            readOnly: true
        },
        isFinal: {
            type: 'boolean',
            readOnly: true
        },
        isHideBySig: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isStatic: {
            type: 'boolean',
            readOnly: true
        },
        isVirtual: {
            type: 'boolean',
            readOnly: true
        },
        isAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamily: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodDefinition: {
            type: 'boolean',
            readOnly: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        methodHandle: {
            '$ref': '#/components/schemas/RuntimeMethodHandle'
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        returnParameter: {
            '$ref': '#/components/schemas/ParameterInfo'
        },
        returnType: {
            '$ref': '#/components/schemas/Type'
        },
        returnTypeCustomAttributes: {
            '$ref': '#/components/schemas/ICustomAttributeProvider'
        }
    },
    additionalProperties: false
} as const;

export const ModuleSchema = {
    type: 'object',
    properties: {
        assembly: {
            '$ref': '#/components/schemas/Assembly'
        },
        fullyQualifiedName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        mdStreamVersion: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        moduleVersionId: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        scopeName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        moduleHandle: {
            '$ref': '#/components/schemas/ModuleHandle'
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const ModuleHandleSchema = {
    type: 'object',
    properties: {
        mdStreamVersion: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const ParameterAttributesSchema = {
    enum: [0, 1, 2, 4, 8, 16, 4096, 8192, 16384, 32768, 61440],
    type: 'integer',
    format: 'int32'
} as const;

export const ParameterInfoSchema = {
    type: 'object',
    properties: {
        attributes: {
            '$ref': '#/components/schemas/ParameterAttributes'
        },
        member: {
            '$ref': '#/components/schemas/MemberInfo'
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        parameterType: {
            '$ref': '#/components/schemas/Type'
        },
        position: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        isIn: {
            type: 'boolean',
            readOnly: true
        },
        isLcid: {
            type: 'boolean',
            readOnly: true
        },
        isOptional: {
            type: 'boolean',
            readOnly: true
        },
        isOut: {
            type: 'boolean',
            readOnly: true
        },
        isRetval: {
            type: 'boolean',
            readOnly: true
        },
        defaultValue: {
            nullable: true,
            readOnly: true
        },
        rawDefaultValue: {
            nullable: true,
            readOnly: true
        },
        hasDefaultValue: {
            type: 'boolean',
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const PropertyAttributesSchema = {
    enum: [0, 512, 1024, 4096, 8192, 16384, 32768, 62464],
    type: 'integer',
    format: 'int32'
} as const;

export const PropertyInfoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        declaringType: {
            '$ref': '#/components/schemas/Type'
        },
        reflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        module: {
            '$ref': '#/components/schemas/Module'
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        propertyType: {
            '$ref': '#/components/schemas/Type'
        },
        attributes: {
            '$ref': '#/components/schemas/PropertyAttributes'
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        canRead: {
            type: 'boolean',
            readOnly: true
        },
        canWrite: {
            type: 'boolean',
            readOnly: true
        },
        getMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        setMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        }
    },
    additionalProperties: false
} as const;

export const RuntimeFieldHandleSchema = {
    type: 'object',
    properties: {
        value: {
            '$ref': '#/components/schemas/IntPtr'
        }
    },
    additionalProperties: false
} as const;

export const RuntimeMethodHandleSchema = {
    type: 'object',
    properties: {
        value: {
            '$ref': '#/components/schemas/IntPtr'
        }
    },
    additionalProperties: false
} as const;

export const RuntimeTypeHandleSchema = {
    type: 'object',
    properties: {
        value: {
            '$ref': '#/components/schemas/IntPtr'
        }
    },
    additionalProperties: false
} as const;

export const SecurityRuleSetSchema = {
    enum: [0, 1, 2],
    type: 'integer',
    format: 'int32'
} as const;

export const StepDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        dependencies: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        variables: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const StepRunDTOSchema = {
    type: 'object',
    properties: {
        step: {
            '$ref': '#/components/schemas/StepDTO'
        },
        variables: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VariableDTO'
            },
            nullable: true
        },
        generation: {
            type: 'integer',
            format: 'int32'
        },
        status: {
            type: 'string',
            nullable: true
        },
        result: {
            '$ref': '#/components/schemas/VariableDTO'
        },
        exception: {
            '$ref': '#/components/schemas/Exception'
        }
    },
    additionalProperties: false
} as const;

export const StructLayoutAttributeSchema = {
    type: 'object',
    properties: {
        typeId: {
            nullable: true,
            readOnly: true
        },
        value: {
            '$ref': '#/components/schemas/LayoutKind'
        }
    },
    additionalProperties: false
} as const;

export const TypeSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        isInterface: {
            type: 'boolean',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        namespace: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        assemblyQualifiedName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        fullName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        assembly: {
            '$ref': '#/components/schemas/Assembly'
        },
        module: {
            '$ref': '#/components/schemas/Module'
        },
        isNested: {
            type: 'boolean',
            readOnly: true
        },
        declaringType: {
            '$ref': '#/components/schemas/Type'
        },
        declaringMethod: {
            '$ref': '#/components/schemas/MethodBase'
        },
        reflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        underlyingSystemType: {
            '$ref': '#/components/schemas/Type'
        },
        isTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        isArray: {
            type: 'boolean',
            readOnly: true
        },
        isByRef: {
            type: 'boolean',
            readOnly: true
        },
        isPointer: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericType: {
            type: 'boolean',
            readOnly: true
        },
        isGenericParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericTypeParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericType: {
            type: 'boolean',
            readOnly: true
        },
        isGenericTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        isSZArray: {
            type: 'boolean',
            readOnly: true
        },
        isVariableBoundArray: {
            type: 'boolean',
            readOnly: true
        },
        isByRefLike: {
            type: 'boolean',
            readOnly: true
        },
        isFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        isUnmanagedFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        hasElementType: {
            type: 'boolean',
            readOnly: true
        },
        genericTypeArguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        },
        genericParameterPosition: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        genericParameterAttributes: {
            '$ref': '#/components/schemas/GenericParameterAttributes'
        },
        attributes: {
            '$ref': '#/components/schemas/TypeAttributes'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isImport: {
            type: 'boolean',
            readOnly: true
        },
        isSealed: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isClass: {
            type: 'boolean',
            readOnly: true
        },
        isNestedAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamANDAssem: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamily: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamORAssem: {
            type: 'boolean',
            readOnly: true
        },
        isNestedPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isNestedPublic: {
            type: 'boolean',
            readOnly: true
        },
        isNotPublic: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isAutoLayout: {
            type: 'boolean',
            readOnly: true
        },
        isExplicitLayout: {
            type: 'boolean',
            readOnly: true
        },
        isLayoutSequential: {
            type: 'boolean',
            readOnly: true
        },
        isAnsiClass: {
            type: 'boolean',
            readOnly: true
        },
        isAutoClass: {
            type: 'boolean',
            readOnly: true
        },
        isUnicodeClass: {
            type: 'boolean',
            readOnly: true
        },
        isCOMObject: {
            type: 'boolean',
            readOnly: true
        },
        isContextful: {
            type: 'boolean',
            readOnly: true
        },
        isEnum: {
            type: 'boolean',
            readOnly: true
        },
        isMarshalByRef: {
            type: 'boolean',
            readOnly: true
        },
        isPrimitive: {
            type: 'boolean',
            readOnly: true
        },
        isValueType: {
            type: 'boolean',
            readOnly: true
        },
        isSignatureType: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        structLayoutAttribute: {
            '$ref': '#/components/schemas/StructLayoutAttribute'
        },
        typeInitializer: {
            '$ref': '#/components/schemas/ConstructorInfo'
        },
        typeHandle: {
            '$ref': '#/components/schemas/RuntimeTypeHandle'
        },
        guid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        baseType: {
            '$ref': '#/components/schemas/Type'
        },
        isSerializable: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        isVisible: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const TypeAttributesSchema = {
    enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 24, 32, 128, 256, 1024, 2048, 4096, 8192, 16384, 65536, 131072, 196608, 262144, 264192, 1048576, 12582912],
    type: 'integer',
    format: 'int32'
} as const;

export const TypeInfoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        customAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        isCollectible: {
            type: 'boolean',
            readOnly: true
        },
        metadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        isInterface: {
            type: 'boolean',
            readOnly: true
        },
        memberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        namespace: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        assemblyQualifiedName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        fullName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        assembly: {
            '$ref': '#/components/schemas/Assembly'
        },
        module: {
            '$ref': '#/components/schemas/Module'
        },
        isNested: {
            type: 'boolean',
            readOnly: true
        },
        declaringType: {
            '$ref': '#/components/schemas/Type'
        },
        declaringMethod: {
            '$ref': '#/components/schemas/MethodBase'
        },
        reflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        underlyingSystemType: {
            '$ref': '#/components/schemas/Type'
        },
        isTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        isArray: {
            type: 'boolean',
            readOnly: true
        },
        isByRef: {
            type: 'boolean',
            readOnly: true
        },
        isPointer: {
            type: 'boolean',
            readOnly: true
        },
        isConstructedGenericType: {
            type: 'boolean',
            readOnly: true
        },
        isGenericParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericTypeParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericMethodParameter: {
            type: 'boolean',
            readOnly: true
        },
        isGenericType: {
            type: 'boolean',
            readOnly: true
        },
        isGenericTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        isSZArray: {
            type: 'boolean',
            readOnly: true
        },
        isVariableBoundArray: {
            type: 'boolean',
            readOnly: true
        },
        isByRefLike: {
            type: 'boolean',
            readOnly: true
        },
        isFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        isUnmanagedFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        hasElementType: {
            type: 'boolean',
            readOnly: true
        },
        genericTypeArguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        },
        genericParameterPosition: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        genericParameterAttributes: {
            '$ref': '#/components/schemas/GenericParameterAttributes'
        },
        attributes: {
            '$ref': '#/components/schemas/TypeAttributes'
        },
        isAbstract: {
            type: 'boolean',
            readOnly: true
        },
        isImport: {
            type: 'boolean',
            readOnly: true
        },
        isSealed: {
            type: 'boolean',
            readOnly: true
        },
        isSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        isClass: {
            type: 'boolean',
            readOnly: true
        },
        isNestedAssembly: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamANDAssem: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamily: {
            type: 'boolean',
            readOnly: true
        },
        isNestedFamORAssem: {
            type: 'boolean',
            readOnly: true
        },
        isNestedPrivate: {
            type: 'boolean',
            readOnly: true
        },
        isNestedPublic: {
            type: 'boolean',
            readOnly: true
        },
        isNotPublic: {
            type: 'boolean',
            readOnly: true
        },
        isPublic: {
            type: 'boolean',
            readOnly: true
        },
        isAutoLayout: {
            type: 'boolean',
            readOnly: true
        },
        isExplicitLayout: {
            type: 'boolean',
            readOnly: true
        },
        isLayoutSequential: {
            type: 'boolean',
            readOnly: true
        },
        isAnsiClass: {
            type: 'boolean',
            readOnly: true
        },
        isAutoClass: {
            type: 'boolean',
            readOnly: true
        },
        isUnicodeClass: {
            type: 'boolean',
            readOnly: true
        },
        isCOMObject: {
            type: 'boolean',
            readOnly: true
        },
        isContextful: {
            type: 'boolean',
            readOnly: true
        },
        isEnum: {
            type: 'boolean',
            readOnly: true
        },
        isMarshalByRef: {
            type: 'boolean',
            readOnly: true
        },
        isPrimitive: {
            type: 'boolean',
            readOnly: true
        },
        isValueType: {
            type: 'boolean',
            readOnly: true
        },
        isSignatureType: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        isSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        structLayoutAttribute: {
            '$ref': '#/components/schemas/StructLayoutAttribute'
        },
        typeInitializer: {
            '$ref': '#/components/schemas/ConstructorInfo'
        },
        typeHandle: {
            '$ref': '#/components/schemas/RuntimeTypeHandle'
        },
        guid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        baseType: {
            '$ref': '#/components/schemas/Type'
        },
        isSerializable: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        containsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        isVisible: {
            type: 'boolean',
            readOnly: true
        },
        genericTypeParameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        },
        declaredConstructors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConstructorInfo'
            },
            nullable: true,
            readOnly: true
        },
        declaredEvents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EventInfo'
            },
            nullable: true,
            readOnly: true
        },
        declaredFields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FieldInfo'
            },
            nullable: true,
            readOnly: true
        },
        declaredMembers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MemberInfo'
            },
            nullable: true,
            readOnly: true
        },
        declaredMethods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MethodInfo'
            },
            nullable: true,
            readOnly: true
        },
        declaredNestedTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TypeInfo'
            },
            nullable: true,
            readOnly: true
        },
        declaredProperties: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PropertyInfo'
            },
            nullable: true,
            readOnly: true
        },
        implementedInterfaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const VariableDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        displayValue: {
            type: 'string',
            nullable: true
        },
        generation: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const WorkflowDTOSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        steps: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StepDTO'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;